---
name: Build DTS
on:
  workflow_call:
    inputs:
      cacheless:
        type: boolean
        required: true
      kas-path:
        type: string
        required: true
      ref:
        type: string
        required: false
        default: ${{ github.sha }}
      nightly:
        type: boolean
        required: false
        default: false
    outputs:
      dts_scripts_hash_output:
        description: "Hash of dts-scripts main branch used for SRCREV"
        value: ${{ jobs.build.outputs.dts_scripts_hash_nightly }}

jobs:
  build:
    runs-on:
      labels: dts-builder
    env:
      FAILED_ATTEMPTS: 0
    outputs:
      dts_scripts_hash_nightly: ${{ steps.set_dts_scripts_hash_output.outputs.hash }}
    steps:
      - name: Checkout meta-dts repo
        uses: actions/checkout@v4
        with:
          path: "meta-dts"
          ref: ${{ inputs.ref }}
      - name: Prepare nightly SRCREV
        if: ${{ inputs.nightly == true }}
        id: set_dts_scripts_hash_output
        shell: bash
        run: |
          git clone --depth 1 https://github.com/Dasharo/dts-scripts dts-scripts-tmp
          DTS_SCRIPTS_HASH=$(cd dts-scripts-tmp && git rev-parse HEAD)
          echo "hash=${DTS_SCRIPTS_HASH}" >> $GITHUB_OUTPUT
          rm -rf dts-scripts-tmp
          FILE_PATH="meta-dts/meta-dts-distro/recipes-dts/dts-scripts/dts-scripts_git.bb"
          if [ -f "$FILE_PATH" ]; then
            sed -i "s/^SRCREV = \".*\"/SRCREV = \"${DTS_SCRIPTS_HASH}\"/" "$FILE_PATH"
            echo "Updated SRCREV in $FILE_PATH to ${DTS_SCRIPTS_HASH}"
          else
            echo "Error: File $FILE_PATH not found. Cannot update SRCREV."
            exit 1
          fi
      - name: Prepare cache-less build configuration
        if: ${{ inputs.cacheless }}
        shell: bash
        run: |
          sed -i '/cache.yml/d' "${{ inputs.kas-path }}"
      - name: Build DTS image
        shell: bash
        id: build_image
        run: |
          for attempt in {1..5}; do
            if kas-container build "${{ inputs.kas-path }}"; then
              echo "Build command succeeded on attempt $attempt"
              break
            else
              echo "Build command failed on attempt $attempt"
              echo "FAILED_ATTEMPTS=$attempt" >> $GITHUB_ENV
              if [ $attempt -lt 5 ]; then
                sleep 5
              else
                exit 1
              fi
            fi
          done
      - name: Report build command
        if: always()
        run: |
          echo "$FAILED_ATTEMPTS build attempts failed"
