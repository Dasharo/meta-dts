#!/usr/bin/env bash

# set -x

source /usr/sbin/dts-environment.sh
source /usr/sbin/dts-functions.sh

BIOS_UPDATE_CONFIG_FILE="/tmp/biosupdate_config"
FW_BACKUP_NAME="fw_backup"
FW_BACKUP_DIR="${ROOT_DIR}${FW_BACKUP_NAME}"
FW_BACKUP_TAR="${FW_BACKUP_DIR}.tar.gz"
FW_BACKUP_TAR="$(echo "$FW_BACKUP_TAR" | sed 's/\ /_/g')"
KEYS_DIR="/tmp/devkeys"
RESIGNED_BIOS_UPDATE_FILE="/tmp/biosupdate_resigned.rom"
ROOT_DIR="/"
SYSTEM_UUID_FILE="/tmp/system_uuid.txt"
SERIAL_NUMBER_FILE="/tmp/serial_number.txt"
# default values for flashrom programmer
PROGRAMMER_BIOS="internal"
PROGRAMMER_EC="ite_ec"

[ -z "$BOARD_VENDOR" ] && error_exit "BOARD_VENDOR not given"
[ -z "$SYSTEM_MODEL" ] && error_exit "SYSTEM_MODEL not given"

CMD="$1"
FUM="$2"

ask_for_version()
{
  while : ; do
    echo
    echo "Please, select Dasharo firmware version to install"

    # -v: True if the shell variable varname is set (has been assigned a value).
    if [ -v BIOS_HASH_COMM ]; then
      echo "  c) Community version"
    fi
    if [ -v BIOS_HASH_DES ]; then
      if [ -v DES_IS_LOGGED ]; then
        echo "  d) DES version"
      else
        echo "  DES version available, if you are interested, please visit https://shop.3mdeb.com/product-category/dasharo-entry-subscription/"
      fi
    fi
    echo "  b) Back to main menu"
    echo
    read -r -p "Enter an option: " OPTION
    echo

    case ${OPTION} in
      c|C|comm|community|COMMUNITY|COMM|Community)
        if [ -v BIOS_HASH_COMM ]; then
          BIOS_HASH=$BIOS_HASH_COMM
          BIOS_LINK=$BIOS_LINK_COMM
          if [ -v EC_HASH_COMM ]; then
            EC_HASH=$EC_HASH_COMM
            EC_LINK=$EC_LINK_COMM
          fi
          echo "Community version selected"
          break
        else
          error_exit "Bad option or resignation. Returning to main menu..."
        fi
        ;;
      d|D|des|DES|Des)
        if [ -v BIOS_HASH_DES ]; then
          USER_DETAILS="$CLOUDSEND_DOWNLOAD_URL:$CLOUDSEND_PASSWORD"
          BIOS_HASH="$(curl -L -s -f -u ${USER_DETAILS} -H ${CLOUD_REQUEST} ${BIOS_LINK_DES}.sha256 2>>$ERR_LOG_FILE | cut -d ' ' -f 1) $BIOS_UPDATE_FILE"
          BIOS_LINK=$BIOS_LINK_DES
          if [ -v EC_HASH_DES ]; then
            EC_HASH=$EC_HASH_DES
            EC_LINK=$EC_LINK_DES
          fi
          echo "Dasharo Entry Subscription version selected"
          break
        else
          error_exit "Bad option. Returning to main menu..."
        fi
        ;;
      b|B)
        echo "Returning to main menu..."
        exit 0
        ;;
      *)
        ;;
    esac
  done
}

display_flashing_warning() {
  while : ; do
    echo
    print_warning "Please verify detected hardware!"
    echo

    if [ -v BOARD_VENDOR ]; then
      echo "Board vendor: $BOARD_VENDOR"
    fi
    if [ -v SYSTEM_MODEL ]; then
      echo "System model: $SYSTEM_MODEL"
    fi
    if [ -v BOARD_MODEL ]; then
      echo "Board model: $BOARD_MODEL"
    fi
    echo
    read -r -p "Does it match your actual specification? (Y|n) " OPTION
    echo

    case ${OPTION} in
      yes|y|Y|Yes|YES)
        break
        ;;
      n|N)
        echo "Returning to main menu..."
        exit 0
        ;;
      *)
        ;;
    esac
  done

  while : ; do
    echo "Following firmware will be used to install Dasharo"
    if [ -v BIOS_HASH ]; then
      local _bios_hash="$(echo $BIOS_HASH | cut -d ' ' -f 1)"
      echo "Dasharo BIOS firmware:"
      echo "  - link: $BIOS_LINK"
      echo "  - hash: $_bios_hash"
    fi
    if [ -v EC_HASH ]; then
      local _ec_hash="$(echo $EC_HASH | cut -d ' ' -f 1)"
      echo "Dasharo EC firmware:"
      echo "  - link: $EC_LINK"
      echo "  - hash: $_ec_hash"
    fi
    echo
    echo "You can learn more about this release on: https://docs.dasharo.com/"

    if check_if_dasharo; then
        echo
        read -r -p "Do you want to update Dasharo firmware on your hardware? (Y|n) " OPTION
        echo
    else
        echo
        read -r -p "Do you want to install Dasharo firmware on your hardware? (Y|n) " OPTION
        echo
    fi

    case ${OPTION} in
      yes|y|Y|Yes|YES)
        break
        ;;
      n|N)
        echo "Returning to main menu..."
        exit 0
        ;;
      *)
        ;;
    esac
  done
}

backup() {
  rm -rf "$FW_BACKUP_DIR"
  mkdir -p "$FW_BACKUP_DIR"

  echo "Backing up BIOS firmware and store it locally..."
  echo "Remember that firmware is also backed up in HCL report."
  # On MSI boards some regions may be not available so we need to use specific
  # ones
  if [ "$BOARD_VENDOR" == "Micro-Star International Co., Ltd." ] && [ "$SYSTEM_MODEL" == "MS-7E06" ]; then
      FLASHROM_ADD_OPT_READ="--ifd -i fd -i me -i bios"
  else
      FLASHROM_ADD_OPT_READ=" "
  fi
  flashrom -p "$PROGRAMMER_BIOS" ${FLASH_CHIP_SELECT} -r "${FW_BACKUP_DIR}"/rom.bin ${FLASHROM_ADD_OPT_READ} >> $FLASHROM_LOG_FILE 2>> $ERR_LOG_FILE
  error_check "Failed to read BIOS firmware backup"

  if [ "$HAVE_EC" = "true" ]; then
    echo "Checking for Open Source Embedded Controller firmware"
    dasharo_ectool info >> $ERR_LOG_FILE 2>&1
    if [ $? -eq 0 ]; then
      echo "Device has already Open Source Embedded Controller firmware, do not backup EC..."
    else
      echo "Backing up EC firmware..."
      flashrom -p "$PROGRAMMER_EC" ${FLASH_CHIP_SELECT} -r "${FW_BACKUP_DIR}"/ec.bin >> $FLASHROM_LOG_FILE 2>> $ERR_LOG_FILE
      error_check "Failed to read EC firmware backup"
    fi
  fi

  echo "Saving backup to: $FW_BACKUP_TAR"
  tar --gzip -cf "$FW_BACKUP_TAR" "$FW_BACKUP_DIR"
  error_check "Failed to create firmware backup archive"
  rm -rf "${FW_BACKUP_DIR}"

  echo "Successfully backed up firmware locally at: $FW_BACKUP_TAR"
}

install_ec() {
  echo "Downloading Dasharo EC firmware update..."
  curl -L -f "$EC_LINK" -o "$EC_UPDATE_FILE"
  error_check "Cannot access $FW_STORE_URL. Please check your internet
 connection"
  sha256sum --check <(echo "$EC_HASH")
  error_check "Failed to download Dasharo EC firmware update"

  echo "Updating EC..."
  flashrom -p "$PROGRAMMER_EC" ${FLASH_CHIP_SELECT} -w "$EC_UPDATE_FILE" >> $FLASHROM_LOG_FILE 2>> $ERR_LOG_FILE
  error_check "Failed to update EC firmware"

  echo "Successfully updated EC firmware"
}

romhole_migration() {
    echo "Beginning ROM hole migration process..."
    flashrom -p "$PROGRAMMER_BIOS" ${FLASH_CHIP_SELECT} -r /tmp/rom.bin ${FLASHROM_ADD_OPT_READ} >> $FLASHROM_LOG_FILE 2>> $ERR_LOG_FILE
    dd if=/tmp/rom.bin of=/tmp/romhole.bin skip=$((0x17C0000)) bs=128K count=1 iflag=skip_bytes
    echo "Migrate to ROMHOLE section."
    cbfstool "$BIOS_UPDATE_FILE" write -r ROMHOLE -f /tmp/romhole.bin -u
}

smbios_migration() {
  echo -n "$(dmidecode -s system-uuid)" > $SYSTEM_UUID_FILE
  echo -n "$(dmidecode -s baseboard-serial-number)" > $SERIAL_NUMBER_FILE

  COREBOOT_SEC=$(cbfstool $BIOS_UPDATE_FILE layout -w | grep "COREBOOT")
  FW_MAIN_A_SEC=$(cbfstool $BIOS_UPDATE_FILE layout -w | grep "FW_MAIN_A")
  FW_MAIN_B_SEC=$(cbfstool $BIOS_UPDATE_FILE layout -w | grep "FW_MAIN_B")

  if [ -n "$COREBOOT_SEC" ]; then
    # if the migration can be done there for sure will be COREBOOT section
    echo "Beginning SMBIOS migration process..."
    echo "Migrate to COREBOOT section."
    cbfstool $BIOS_UPDATE_FILE add -f $SERIAL_NUMBER_FILE -n serial_number -t raw -r COREBOOT
    cbfstool $BIOS_UPDATE_FILE add -f $SYSTEM_UUID_FILE -n system_uuid -t raw -r COREBOOT
  fi

  if [ -n "$FW_MAIN_A_SEC" ]; then
    echo "Migrate to FW_MAIN_A section."
    cbfstool $BIOS_UPDATE_FILE expand -r FW_MAIN_A
    cbfstool $BIOS_UPDATE_FILE add -f $SERIAL_NUMBER_FILE -n serial_number -t raw -r FW_MAIN_A
    cbfstool $BIOS_UPDATE_FILE add -f $SYSTEM_UUID_FILE -n system_uuid -t raw -r FW_MAIN_A
    cbfstool $BIOS_UPDATE_FILE truncate -r FW_MAIN_A
  fi

  if [ -n "$FW_MAIN_B_SEC" ]; then
    echo "Migrate to FW_MAIN_B section."
    cbfstool $BIOS_UPDATE_FILE expand -r FW_MAIN_B
    cbfstool $BIOS_UPDATE_FILE add -f $SERIAL_NUMBER_FILE -n serial_number -t raw -r FW_MAIN_B
    cbfstool $BIOS_UPDATE_FILE add -f $SYSTEM_UUID_FILE -n system_uuid -t raw -r FW_MAIN_B
    cbfstool $BIOS_UPDATE_FILE truncate -r FW_MAIN_B
  fi
}

smmstore_migration() {
    echo "Beginning SMMSTORE migration process..."
    flashrom -p "$PROGRAMMER_BIOS" ${FLASH_CHIP_SELECT} -r /tmp/dasharo_dump.rom ${FLASHROM_ADD_OPT_READ} --fmap -i FMAP -i SMMSTORE >> $FLASHROM_LOG_FILE 2>> $ERR_LOG_FILE
    cbfstool /tmp/dasharo_dump.rom read -r SMMSTORE -f /tmp/smmstore.bin
    echo "Migrate to SMMSTORE section."
    cbfstool "$BIOS_UPDATE_FILE" write -r SMMSTORE -f /tmp/smmstore.bin -u
}

resign_binary() {
  if [ "$HAVE_VBOOT" -eq 0 ]; then
    download_keys
    sign_firmware.sh $BIOS_UPDATE_FILE $KEYS_DIR $RESIGNED_BIOS_UPDATE_FILE
    error_check "Cannot resign binary file. Please, make sure if you have proper keys. Aborting..."
    BIOS_UPDATE_FILE="$RESIGNED_BIOS_UPDATE_FILE"
  fi
}

download_keys() {
  mkdir $KEYS_DIR
  wget -O $KEYS_DIR/recovery_key.vbpubk https://github.com/Dasharo/vboot/raw/dasharo/tests/devkeys/recovery_key.vbpubk >> $ERR_LOG_FILE 2>&1
  wget -O $KEYS_DIR/firmware.keyblock https://github.com/Dasharo/vboot/raw/dasharo/tests/devkeys/firmware.keyblock >> $ERR_LOG_FILE 2>&1
  wget -O $KEYS_DIR/firmware_data_key.vbprivk https://github.com/Dasharo/vboot/raw/dasharo/tests/devkeys/firmware_data_key.vbprivk >> $ERR_LOG_FILE 2>&1
  wget -O $KEYS_DIR/kernel_subkey.vbpubk https://github.com/Dasharo/vboot/raw/dasharo/tests/devkeys/kernel_subkey.vbpubk >> $ERR_LOG_FILE 2>&1
  wget -O $KEYS_DIR/root_key.vbpubk https://github.com/Dasharo/vboot/raw/dasharo/tests/devkeys/root_key.vbpubk>> $ERR_LOG_FILE 2>&1
}

blob_transmission() {
  echo "Extracting the UEFI image from BIOS update"
  wget -O "$DBT_BIOS_UPDATE_FILENAME" --user-agent='Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)' "$DBT_BIOS_UPDATE_URL" >> $ERR_LOG_FILE 2>&1
  error_file_check "$DBT_BIOS_UPDATE_FILENAME" "Failed to download BIOS for $SYSTEM_MODEL"

  sha256sum --check <(echo "$DBT_BIOS_UPDATE_HASH")
  error_check "Failed SHA-256 sum check on the downloaded BIOS for $SYSTEM_MODEL"

  binwalk --run-as=root -e "$DBT_BIOS_UPDATE_FILENAME" -C /tmp >> $ERR_LOG_FILE 2>&1
  error_file_check "$DBT_UEFI_IMAGE" "Failed to extract UEFI image from BIOS update"

  uefi-firmware-parser -e "$DBT_UEFI_IMAGE" -O >> $ERR_LOG_FILE 2>&1

  if [ -n "$SINIT_ACM_FILENAME" ] && [ -n "$SINIT_ACM_URL" ]; then
    echo "Downloading the Intel SINIT ACM"
    wget -O "$SINIT_ACM_FILENAME" "$SINIT_ACM_URL" >> $ERR_LOG_FILE 2>&1
    error_file_check "$SINIT_ACM_FILENAME" "Failed to download Intel SINIT ACM."

    # Intel does not provide hash of the package, use SHA256 we know is good
    sha256sum --check <(echo "$SINIT_ACM_HASH")
    error_check "Failed SHA-256 sum check on the downloaded Intel SINIT ACM."

    unzip -o "$SINIT_ACM_FILENAME" -d /tmp >> $ERR_LOG_FILE 2>&1
    error_check "Failed to decompress Intel SINIT ACM package."
  fi

  echo "Beginning Dasharo Blobs Transmission process..."

  if [ -n "$SCH5545_FW" ]; then
    error_file_check "$SCH5545_FW" "Failed to find SCH5545 EC firmware binary."
    echo -n "Adding SCH5545 EC firmware..."
    cbfstool "$BIOS_UPDATE_FILE" add -f "$SCH5545_FW" -n sch5545_ecfw.bin -t raw
    print_green "Done"
  fi

  if [ -n "$ACM_BIN" ]; then
    error_file_check "$ACM_BIN" "Failed to find BIOS ACM binary."
    echo -n "Adding BIOS ACM..."
    cbfstool "$BIOS_UPDATE_FILE" add -f "$ACM_BIN" -n txt_bios_acm.bin -t raw
    print_green "Done"
  fi

  if [ -n "$SINIT_ACM" ]; then
    error_file_check "$SINIT_ACM" "Failed to find Intel SINIT ACM binary."
    echo -n "Adding SINIT ACM..."
    cbfstool "$BIOS_UPDATE_FILE" add -f "$SINIT_ACM" -n txt_sinit_acm.bin -t raw
    print_green "Done"
  fi
}

install() {
  ask_for_version
  display_flashing_warning
  check_flash_lock
  echo "Downloading Dasharo firmware..."
  if [ -v BIOS_LINK_COMM ] && [ ${BIOS_LINK} == ${BIOS_LINK_COMM} ]; then
    curl -L -f "$BIOS_LINK" -o $BIOS_UPDATE_FILE
    error_check "Cannot access $FW_STORE_URL. Please check your internet
   connection"
  else
    USER_DETAILS="$CLOUDSEND_DOWNLOAD_URL:$CLOUDSEND_PASSWORD"
    curl -L -f -u "$USER_DETAILS" -H "$CLOUD_REQUEST" "$BIOS_LINK" -o $BIOS_UPDATE_FILE
    error_check "Cannot access $FW_STORE_URL_DES. Please check your internet
   connection"
  fi
  sha256sum --check <(echo "$BIOS_HASH")
  error_check "Failed to verify Dasharo firmware"

  if [ "$HAVE_EC" = "true" ]; then
    echo "Checking for Open Source Embedded Controller firmware"
    dasharo_ectool info >> $ERR_LOG_FILE 2>&1
    if [ $? -eq 0 ]; then
      echo "Device has already Open Source Embedded Controller firmware, do not flash EC..."
    else
      _ec_fw_version=$(flashrom -p "$PROGRAMMER_EC" ${FLASH_CHIP_SELECT} | grep "Mainboard EC Version" | tr -d ' ' | cut -d ':' -f 2)
      if [ "$_ec_fw_version" != "$COMPATIBLE_EC_FW_VERSION" ]; then
        print_warning "EC version: $_ec_fw_version is not supported, update required"
        install_ec
      fi
    fi
  fi

  cbfstool "$BIOS_UPDATE_FILE" extract -r COREBOOT -n config -f "$BIOS_UPDATE_CONFIG_FILE"
  grep "CONFIG_VBOOT=y" "$BIOS_UPDATE_CONFIG_FILE"
  HAVE_VBOOT="$?"

  if [ "$NEED_ROMHOLE_MIGRATION" = "true" ]; then
    romhole_migration
  fi

  if [ "$NEED_SMBIOS_MIGRATION" = "true" ]; then
    smbios_migration
    resign_binary
  fi

  if [ "$NEED_BLOB_TRANSMISSION" = "true" ]; then
    blob_transmission
  fi

  echo "Installing Dasharo firmware..."
  flashrom -p "$PROGRAMMER_BIOS" ${FLASH_CHIP_SELECT} ${FLASHROM_ADD_OPT_DEPLOY} -w "$BIOS_UPDATE_FILE" >> $FLASHROM_LOG_FILE 2>> $ERR_LOG_FILE
  error_check "Failed to install Dasharo firmware"

  print_green "Successfully installed Dasharo firmware"

  echo -n "Syncing disks... "
  sync
  echo "Done."
  if [ "$NEED_EC_RESET" = "true" ]; then
    echo "The computer will shut down automatically in 5 seconds"
  else
    echo "The computer will reboot automatically in 5 seconds"
  fi
  sleep 0.5
  echo "Rebooting in 5s:"
  echo "5..."
  sleep 1
  echo "4..."
  sleep 1
  echo "3..."
  sleep 1
  echo "2..."
  sleep 1
  echo "1..."
  sleep 0.5
  echo "Rebooting"
  sleep 1
  if [ "$NEED_EC_RESET" = "true" ]; then
    it5570_shutdown
  else
    ${CMD_REBOOT}
  fi
}

update_ec() {
  echo "Downloading EC firmware update..."
  curl --progress-bar -L -f "$EC_LINK" -o "$EC_UPDATE_FILE"
  error_check "Cannot access $FW_STORE_URL. Please check your internet connection"
  echo "Checking sha256sum..."
  sha256sum --check <(echo "$EC_HASH")
  error_check "Failed to download EC firmware update"

  echo "Updating EC..."
  dasharo_ectool flash "$EC_UPDATE_FILE" &>> $ERR_LOG_FILE
  error_check "Failed to update EC firmware"
}

update() {
  local _update_version=""

  check_if_ac
  if [ $? -ne 0 ]; then
    echo "Firmware update process interrupted on user request."
    exit 1
  fi

  echo "Checking for the latest Dasharo update available..."
  echo "Current Dasharo version: $DASHARO_VERSION"
  if [ -v BIOS_HASH_DES ]; then
    if [ -v DES_IS_LOGGED ]; then
      echo "Latest available Dasharo version: $DASHARO_REL_VER_DES"
      USER_DETAILS="$CLOUDSEND_DOWNLOAD_URL:$CLOUDSEND_PASSWORD"
      BIOS_HASH="$(curl -L -s -f -u ${USER_DETAILS} -H ${CLOUD_REQUEST} ${BIOS_LINK_DES}.sha256 2>>$ERR_LOG_FILE | cut -d ' ' -f 1) $BIOS_UPDATE_FILE"
      BIOS_LINK=$BIOS_LINK_DES
      if [ "$HAVE_EC" = "true" ]; then
        EC_HASH=$EC_HASH_DES
        EC_LINK=$EC_LINK_DES
      fi
      _update_version=$DASHARO_REL_VER_DES
    else
      echo "DES version available, if you are interested, please visit https://shop.3mdeb.com/product-category/dasharo-entry-subscription/"
      echo "Latest available Dasharo version: $DASHARO_REL_VER"
      BIOS_HASH=$BIOS_HASH_COMM
      BIOS_LINK=$BIOS_LINK_COMM
      if [ "$HAVE_EC" = "true" ]; then
        EC_HASH=$EC_HASH_COMM
        EC_LINK=$EC_LINK_COMM
      fi
      _update_version=$DASHARO_REL_VER
    fi
  else
    echo "Latest available Dasharo version: $DASHARO_REL_VER"
    BIOS_HASH=$BIOS_HASH_COMM
    BIOS_LINK=$BIOS_LINK_COMM
    if [ "$HAVE_EC" == "true" ]; then
      EC_HASH=$EC_HASH_COMM
      EC_LINK=$EC_LINK_COMM
    fi
    _update_version=$DASHARO_REL_VER
  fi

  compare_versions $DASHARO_VERSION $_update_version
  if [ $? -ne 1 ]; then
    error_exit "No update available for your machine"
  fi

  if [ ! "$FUM" == "fum" ]; then
    display_flashing_warning
  fi
  check_flash_lock

  echo "Downloading Dasharo firmware update..."
  if [ -v BIOS_LINK_COMM ] && [ ${BIOS_LINK} == ${BIOS_LINK_COMM} ]; then
    curl -L -f "$BIOS_LINK" -o $BIOS_UPDATE_FILE
    error_check "Cannot access $FW_STORE_URL. Please check your internet
   connection"
  else
    USER_DETAILS="$CLOUDSEND_DOWNLOAD_URL:$CLOUDSEND_PASSWORD"
    curl -L -f -u "$USER_DETAILS" -H "$CLOUD_REQUEST" "$BIOS_LINK" -o $BIOS_UPDATE_FILE
    error_check "Cannot access $FW_STORE_URL_DES. Please check your internet
   connection"
  fi
  echo "Checking sha256sum..."
  sha256sum --check <(echo "$BIOS_HASH")
  error_check "Failed to verify Dasharo firmware"

  if [ "$HAVE_EC" = "true" ]; then
    dasharo_ectool info >> $ERR_LOG_FILE 2>&1
    error_check "Device does not have Dasharo EC firmware - cannot continue update!"
  fi

  if [ "$NEED_SMMSTORE_MIGRATION" = "true" ]; then
    smmstore_migration
  fi

  echo "Updating Dasharo firmware..."
  print_warning "This will take around 3 minutes. Please be patient and do not reset your computer, or touch the keyboard!"
  flashrom -p "$PROGRAMMER_BIOS" ${FLASH_CHIP_SELECT} ${FLASHROM_ADD_OPT_UPDATE} -w "$BIOS_UPDATE_FILE"  >> $FLASHROM_LOG_FILE 2>> $ERR_LOG_FILE
  error_check "Failed to update Dasharo firmware"

  if [ "$HAVE_EC" = "true" ]; then
    echo "Dasharo EC update process will start in a moment."
    sleep 3
    print_warning "Your machine will shut down automatically once it finishes."
    sleep 3
    print_warning "This will take around 1 minute. Please be patient and do not reset your computer, or touch keyboard!"
    echo "Updating Dasharo EC firmware..."
    update_ec
  fi

  print_green "Successfully updated Dasharo firmware"

  echo -n "Syncing disks... "
  sync
  echo "Done."
  echo "The computer will reboot automatically in 5 seconds"
  sleep 0.5
  echo "Rebooting in 5s:"
  echo "5..."
  sleep 1
  echo "4..."
  sleep 1
  echo "3..."
  sleep 1
  echo "2..."
  sleep 1
  echo "1..."
  sleep 0.5
  echo "Rebooting"
  sleep 1
  ${CMD_REBOOT}
}

restore() {
  while : ; do
    echo
    echo "Restoring firmware from HCL report."
    echo "Take note that this will only restore BIOS firmware, no EC."
    echo "Please select one of available options."

    echo "  1) Check for HCL report stored locally"
    if [ -n "${DES_IS_LOGGED}" ]; then
      echo "  2) Check for HCL report stored on 3mdeb cloud"
    fi
    echo "  b) Back to main menu"
    echo
    read -r -p "Enter an option: " OPTION
    echo

    # HCL report should be named as in dasharo-hcl-report so we can find
    # the package based on uuid saved in name, we need to check two options
    # with and without MAC address
    uuid_string=`cat /sys/class/net/$(ip route show default | awk '/default/ {print $5}')/address`
    # if above gives error then there is no internet connection and first
    # part of uuid should be blank
    if [ ! $? -eq 0 ]; then
      uuid_string=""
    fi
    uuid_string+="_$(dmidecode -s system-product-name)"
    uuid_string+="_$(dmidecode -s system-manufacturer)"
    uuid=`uuidgen -n @x500 -N $uuid_string -s`

    case ${OPTION} in
      1)
        echo
        echo "Searching for HCL report on device..."

        HCL_REPORT_PACKAGE="$(find / -name "*$uuid*" | head -n1)"
        if [ ! -z $HCL_REPORT_PACKAGE ]; then
          tar -zxf "$HCL_REPORT_PACKAGE" -C /tmp
          echo "Restoring BIOS firmware..."
          if [ -f "/tmp/logs/rom.bin" ]; then
            # Write to entire flash when restoring, ask if user want to restore
            print_green "Found $HCL_REPORT_PACKAGE"
            read -p "Do you want to restore firmware from the given HCL report? [N/y] "
            case ${REPLY} in
                yes|y|Y|Yes|YES)
                check_flash_lock
                flashrom -p "$PROGRAMMER_BIOS" ${FLASH_CHIP_SELECT} -w "/tmp/logs/rom.bin" >> $FLASHROM_LOG_FILE 2>> $ERR_LOG_FILE
                error_check "Failed to restore BIOS firmware! You can try one more time."
                print_green "Successfully restored firmware"
                echo "Returning to main menu..."
                exit 0
                ;;
                *)
                echo "Returning to main menu..."
                exit 0
                ;;
            esac
          else
            print_error "Report does not have firmware backup!"
          fi
        else
          print_warning "No HCL report found, cannot restore firmware"
          echo "Returning to main menu..."
          exit 0
        fi
        ;;
      2)
        echo
        echo "Searching for HCL report on cloud..."

        ${CMD_CLOUD_LIST} $uuid
        error_check "Could not download HCL report from cloud."

        HCL_REPORT_PACKAGE="$(find / -name *$uuid* | head -n1)"
        tar -zxf "$HCL_REPORT_PACKAGE" -C /tmp
        echo "Restoring BIOS firmware..."
        if [ -f "/tmp/logs/rom.bin" ]; then
          # Write to entire flash when restoring
          check_flash_lock
          flashrom -p "$PROGRAMMER_BIOS" ${FLASH_CHIP_SELECT} -w "/tmp/logs/rom.bin" >> $FLASHROM_LOG_FILE 2>> $ERR_LOG_FILE
          error_check "Failed to restore BIOS firmware! You can try one more time."
          print_green "Successfully restored firmware"
        else
          print_error "Report does not have firmware backup!"
        fi
        ;;
      b|B)
        echo "Returning to main menu..."
        exit 0
        ;;
      *)
        ;;
    esac
  done
}

usage() {
  echo "Usage:"
  echo "  $0 install  - Install Dasharo on this device"
  echo "  $0 backup   - Backup current firmware"
  echo "  $0 restore  - Restore from a previously saved backup"
}

# for FUM we start in dasharo-deploy so we need to verify that we have internet
# connection to download shasums in board_config
if [ "$FUM" == "fum" ]; then
    check_network_connection
fi

board_config
check_flash_chip

case "$CMD" in
  install)
    if check_if_dasharo; then
      error_exit "Dasharo Firmware is already installed. This script is only for\r
        initial deployment of Dasharo Firmware. Aborting..."
    fi
    backup
    install
    ;;
  update)
    if [ "$FUM" == "fum" ]; then
        echo "Firmware Update Mode detected; proceed with automatic update in 5 seconds"
        echo "Updating in 5s:"
        echo "5..."
        sleep 1
        echo "4..."
        sleep 1
        echo "3..."
        sleep 1
        echo "2..."
        sleep 1
        echo "1..."
        sleep 0.5
    fi
    update
    ;;
  backup)
    backup
    ;;
  restore)
    if ! check_if_dasharo; then
      error_exit "Dasharo Firmware is not installed. This script is only for\r
        restoring original firmware on platforms that runs Dasharo Firmware. Aborting..."
    fi
    restore
    ;;
  *)
    usage
    ;;
esac
