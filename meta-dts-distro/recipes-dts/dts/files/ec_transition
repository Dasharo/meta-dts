#!/usr/bin/env bash

error_exit() {
  _error_msg="$1"
  echo "$_error_msg"
  exit 1
}

error_check() {
  _error_code=$?
  _error_msg="$1"
  [ "$_error_code" -ne 0 ] && error_exit "$_error_msg : ($_error_code)"
}

# Method to access IT5570 IO Depth 2 registers
it5570_i2ec() {
  # TODO: Use /dev/port instead of iotools

  # Address high byte
  iotools io_write8 0x2e 0x2e
  iotools io_write8 0x2f 0x11
  iotools io_write8 0x2e 0x2f
  iotools io_write8 0x2f $(($2>>8 & 0xff))

  # Address low byte
  iotools io_write8 0x2e 0x2e
  iotools io_write8 0x2f 0x10
  iotools io_write8 0x2e 0x2f
  iotools io_write8 0x2f $(($2 & 0xff))

  # Data
  iotools io_write8 0x2e 0x2e
  iotools io_write8 0x2f 0x12
  iotools io_write8 0x2e 0x2f

  case $1 in
    "r")
      iotools io_read8 0x2f
      ;;
    "w")
      iotools io_write8 0x2f $3
      ;;
  esac
}

it5570_shutdown() {
  echo -n "Syncing disks... "
  sync
  echo "Done."
  echo "The computer will shut down automatically in 5 seconds"
  sleep 5
  # shut down using EC external watchdog reset
  it5570_i2ec w 0x1f01 0x20
  it5570_i2ec w 0x1f07 0x01
}

check_network_connection() {
  echo 'Waiting for network connection ...'
  n="5"
  while : ; do
    ping -c 3 cloud.3mdeb.com > /dev/null 2>&1 && break
    n=$((n-1))
    if [ "${n}" == "0" ]; then
      error_exit "No network connection to 3mdeb cloud, please recheck Ethernet connection"
    fi
    sleep 1
  done
}

board_config() {
  case "$BOARD_VENDOR" in
    "Notebook")
      case "$BOARD_MODEL" in
        "NS50_70MU")
          HAVE_EC="true"
          NEED_EC_RESET="true"
          COMPATIBLE_EC_FW_VERSION="2022-08-31_cbff21b"
          EC_HASH="d1001465cea74a550914c14f0c8f901b14827a3b5fa0b612ae6d11594ac2b405  /tmp/ecupdate.rom"
          BIOS_HASH="d4c30660c53bac505997de30b9eac4c5ac15f3212c62366730dc2ca3974bba18  /tmp/biosupdate.rom"
          PROGRAMATOR_BIOS="ite_ec"
          PROGRAMATOR_EC="ite_ec"
          BIOS_LINK="https://cloud.3mdeb.com/index.php/s/SKpqSNzfFNY7AbK/download"
          EC_LINK="https://cloud.3mdeb.com/index.php/s/GK2KbXaYprkCCWM/download"
          ;;
        "NV4XMB,ME,MZ")
          HAVE_EC="true"
          NEED_EC_RESET="true"
          COMPATIBLE_EC_FW_VERSION="2022-09-20_8f885fc"
          EC_HASH="28f391238f10e1425b3b11cf21d49efa5f7d8795d236b6a4ac7fa7f09cfb738e  /tmp/ecupdate.rom"
          BIOS_HASH="7271b638c87cba658162931f55bdaa6987eb5b0555075ce8e2297a79a505c8b0  /tmp/biosupdate.rom"
          PROGRAMATOR_BIOS="ite_ec:boardmismatch=force"
          PROGRAMATOR_EC="ite_ec:boardmismatch=force,romsize=128K,autoload=disable"
          BIOS_LINK="https://cloud.3mdeb.com/index.php/s/3cjkJSWBzPfb5SP/download"
          EC_LINK="https://cloud.3mdeb.com/index.php/s/9S5Tmy6kwFjpcNm/download"
          ;;
        *)
          error_exit "Board model $BOARD_MODEL is currently not supported"
	;;
      esac
      ;;
    *)
      error_exit "Board vendor: $BOARD_VENDOR is currently not supported"
      ;;
  esac
}

check_for_opensource_firmware()
{
  echo "Checking for opensource firmware"
  system76_ectool info >> /dev/null 2>&1
  if [ $? -eq 0 ]; then
    error_exit "Device has already Open Source Embedded Controller firmware, aborting..."
  fi
}

download_files()
{
  check_network_connection
  BIOS_UPDATE_PATH="/tmp/biosupdate.rom"
  EC_UPDATE_PATH="/tmp/ecupdate.rom"
  wget -O $EC_UPDATE_PATH $EC_LINK
  error_check "Cannot download EC update file. Aborting..."
  wget -O $BIOS_UPDATE_PATH $BIOS_LINK
  error_check "Cannot download FW update file. Aborting..."
  echo "Successfully downloaded EC and FW files."
}

update_ec() {
  sha256sum --check <(echo "$EC_HASH")
  error_check "Failed to download EC firmware update"

  echo "Updating EC..."
  flashrom -p $PROGRAMATOR_EC -w /tmp/ecupdate.rom
  error_check "Failed to update EC firmware"

  echo "Successfully updated EC firmware"
}

install() {
  sha256sum --check <(echo "$BIOS_HASH")
  error_check "Failed to verify Dasharo evaluation firmware"

  if [ "$HAVE_EC" = "true" ]; then
    _ec_fw_version=$(flashrom -p ${PROGRAMATOR_BIOS} | grep "Mainboard EC Version" | tr -d ' ' | cut -d ':' -f 2)

    if [ "$_ec_fw_version" != "$COMPATIBLE_EC_FW_VERSION" ]; then
      echo "EC version: $_ec_fw_version is not supported, update required"
      update_ec
    fi
  fi

  echo "Installing Dasharo firmware..."
  flashrom -p internal:boardmismatch=force --ifd -i bios -w /tmp/biosupdate.rom
  error_check "Failed to install Dasharo firmware"

  echo "Successfully installed Dasharo firmware"

  echo "Powering off"
  sleep 1
  if [ "$NEED_EC_RESET" = "true" ]; then
    it5570_shutdown
  else
    ${CMD_POWEROFF}
  fi
}

usage() {
  echo "Usage:"
  echo "  $0 "
  exit 1
}

BOARD_VENDOR="$(dmidecode -s system-manufacturer)"
BOARD_MODEL="$(dmidecode -s system-product-name)"
ROOT_DIR="/"

[ -z "$BOARD_VENDOR" ] && error_exit "BOARD_VENDOR not given"
[ -z "$BOARD_MODEL" ] && error_exit "BOARD_MODEL not given"

CMD_POWEROFF="/sbin/poweroff"

check_for_opensource_firmware
board_config
download_files
install
